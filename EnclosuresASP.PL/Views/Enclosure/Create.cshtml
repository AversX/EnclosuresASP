<style type="text/css">
    .k-upload {
        width: 500px;
    }

    .k-remove {
        display: inline;
    }
</style>

@model EnclosuresASP.PL.Models.EnclosureVM
@{
    ViewBag.Title = "Новый шкаф";
}

<br />

<div class="form-horizontal">
    <!-- Modal -->
    <div id="blockModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Добавить блок</h4>
                </div>
                <div class="modal-body">
                    <p>
                        <div id="blockModalBody"></div>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Create", "Enclosure", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Новый шкаф</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EnclosureID)

        <div class="row">
            <div class="form-group">
                @Html.Label("Номер ШЭ", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => Model.Number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Number, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Номер ЭЛИС", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => Model.ElisNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.ElisNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Объект", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => Model.Object, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Object, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Принял", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(m => Model.EmployeID, Model.Employes, "Выберите сотрудника...", htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Дата приёмки", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(x => x.AcceptanceDate, new { htmlAttributes = new { @class = "form-control"} })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Пароль 1 уровня", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Lvl1Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Lvl1Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Пароль 2 уровня", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Lvl2Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Lvl2Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Пароль 3 уровня", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Lvl3Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Lvl3Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Пароль 4 уровня", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Lvl4Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Lvl4Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Пароль 5 уровня", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Lvl5Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Lvl5Password, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @Html.HiddenFor(m => m.BlocksJSON)
        <div class="row">
            <div class="col-md-5 col-md-offset-3">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        Блоки
                    </div>
                    <div id="blocksTable">
                        @Html.Action("Index", "BlockPartial", new { blocks = Model.BlocksJSON })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-1">
                    <button id="addBlockBtn" type="button" class="btn btn-primary">Добавить</button>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-5">
                <input name="files" id="files" type="file" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <div class="btn-group">
                    <button id="submitBtn" name="submitBtn" class="k-primary" type="submit">Создать</button>
                    <button id="cancelBtn" name="cancelBtn" class="k-default" type="button" data-url="@Url.Action("Index", "Enclosure")">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    $('#addBlockBtn').click(function () {
        var url = '@Url.Action("Create", "BlockPartial", new { blocks = "VALUE" })';
        url = url.replace("VALUE", $('#BlocksJSON').val());
        $.get(url, function (data) {
            $('#blockModalBody').html(data);
            $('#blockModal').modal('show');
        });
    });

    function onError(e) {
        var element = document.getElementById('validityMsg');
        if (!element)
            $("#files").parent().after("<div class='validation' id='validityMsg' style='color:red;margin-bottom: 20px;'>Ошибка загрузки</div>")

        var removeButtonHtml = "<button class=\"k-button k-button-bare k-upload-action\" type=\"button\"><span title=\"Remove\" class=\"k-icon k-i-close k-delete\"></span></button>";
        var retryButtons = $('.k-retry').parent();
        try {
            retryButtons.each(function () {
                if ($(this).parent().html().indexOf(removeButtonHtml) === -1) {
                    $(removeButtonHtml).insertAfter($(this));
                }
            });
        }
        catch (e) { }
    }
    function onRemove() {
        var retryButtons = $('.k-retry').parent();
        if (retryButtons.length==1) {
            var element = document.getElementById('validityMsg');
            if (element) {
                element.parentNode.removeChild(element);
            }
        }
    }

    $(function () {
        $("#files").kendoUpload({
            async: {
                saveUrl: '@Url.Action("SaveFile", "Enclosure", new { id = Model.EnclosureID })',
                removeUrl: '@Url.Action("RemoveFile", "Enclosure", new { id = Model.EnclosureID })',
                autoUpload: true
            },
            multiple: true,
            localization: {
                select: 'Выберите файлы',
                remove: '',
                cancel: ''
            },
            error: onError,
            remove: onRemove
        });

    });

    $("#submitBtn").kendoButton();
    $("#cancelBtn").kendoButton().click(function () {
        var url = $(this).data('url');
        window.location.href = url;
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
