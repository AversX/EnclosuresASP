<style type="text/css">
    .k-upload {
        width: 500px;
    }
    .k-remove{
        display :inline;
    }
</style>

@model EnclosuresASP.PL.Models.EnclosureVM
@{
    ViewBag.Title = "Редактировать шкаф №" + Model.Number;
}

@using (Html.BeginForm("Edit", "Enclosure", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Шкаф №@Model.Number</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EnclosureID)

        <div class="row">
                <div class="form-group">
                    @Html.Label("Номер", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(m => Model.Number, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.Number, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Принял", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => Model.EmployeID, Model.Employes, "Выберите сотрудника...", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Employes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Root логин", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.RootLogin, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.RootLogin, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Root пароль", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(m => m.RootPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.RootPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
        </div>

        <div class="row">
            <div class="col-md-5 col-md-offset-3">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        Блоки
                    </div>
                    <table class="table table-striped">
                        <tr>
                            <th class="text-center">Название</th>
                            <th class="text-center">УИД</th>
                        </tr>
                        @if (Model.Blocks?.Count == 0)
                        {
                            <tr>
                                <td colspan="2" class="text-center">Нет ни одного блока</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var item in Model.Blocks)
                            {
                                <tr>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.BlockName.BlockName)
                                    </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.UID)
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-1">
                    <button id="showModal" type="button" class="btn btn-primary">Добавить</button>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-5 col-md-offset-3">
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        СКУД
                    </div>
                    <table class="table table-striped">
                        <tr>
                            <th class="text-center">ID</th>
                            <th class="text-center">Код</th>
                        </tr>
                        @if (Model.ACSs?.Count == 0)
                        {
                            <tr>
                                <td colspan="2" class="text-center">Нет ни одной записи</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var item in Model.ACSs)
                            {
                                <tr>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.ACSID)
                                    </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.Code)
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-1">
                    <button id="showModal" type="button" class="btn btn-primary">Добавить</button>
                </div>
            </div>
        </div>


        <!-- Modal -->
        <div id="blockModal" class="modal fade" role="dialog" data-url='@Url.Action("CreateBlock", "Enclosure", new { id = Model.EnclosureID })'>
            <div class="modal-dialog modal-lg">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Добавить блок</h4>
                    </div>
                    <div class="modal-body">
                        <p>
                            <div id="blockModalBody"></div>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        @Ajax.ActionLink("Add block", "CreateBlock", new { id = Model.EnclosureID },
                        new AjaxOptions
                        {
                            UpdateTargetId = "blockModal",
                            InsertionMode = InsertionMode.Replace,
                            HttpMethod = "GET",
                            OnSuccess = "ShowProducerEditModal"
                        },
                        null)

             @Html.Hidden("existing-files", Model.JsonFiles)
            <div class="form-group">
                <div class="col-md-offset-3 col-md-5">
                    <input name="files" id="files" type="file" />
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <div class="btn-group">
                        <button id="submitBtn" name="submitBtn" class="k-primary" type="submit">Применить</button>
                        <button id="cancelBtn" name="cancelBtn" class="k-default" type="button" data-url="@Url.Action("Index", "Enclosure")">Отмена</button>
                    </div>
                </div>
            </div>
        </div>
}


<script type="text/javascript">
    function ShowProducerEditModal() {
        $('#blockModal').modal('show');
    }


    $('#showModal').click(function () {

        var url = $('#blockModal').data('url');
        $.get(url, function (data) {
            $('#blockModalBody').html(data);
            $('#blockModal').modal('show');
        });
    });

    function bindForm(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        $('#replacetarget').load(result.url); //  Load data from the server and place the returned HTML into the matched element
                    } else {
                        $('#myModalContent').html(result);
                        bindForm(dialog);
                    }
                }
            });
            return false;
        });
    }




    

            function onError(e) {
                var element = document.getElementById('validityMsg');
                if (!element)
                    $("#files").parent().after("<div class='validation' id='validityMsg' style='color:red;margin-bottom: 20px;'>Ошибка загрузки</div>")

                var removeButtonHtml = "<button class=\"k-button k-button-bare k-upload-action\" type=\"button\"><span title=\"Remove\" class=\"k-icon k-i-close k-delete\"></span></button>";
                var retryButtons = $('.k-retry').parent();
                try {
                    retryButtons.each(function () {
                        if ($(this).parent().html().indexOf(removeButtonHtml) === -1) {
                            $(removeButtonHtml).insertAfter($(this));
                        }
                    });
                }
                catch (e) { }
            }
            function onRemove() {
                var retryButtons = $('.k-retry').parent();
                if (retryButtons.length==1) {
                    var element = document.getElementById('validityMsg');
                    if (element) {
                        element.parentNode.removeChild(element);
                    }
                }
            }
            $(function () {
                var filesJson = $("[name$='existing-files']").val();
                var initFiles = JSON.parse(filesJson);
                $("#files").kendoUpload({
                    async: {
                        saveUrl: '@Url.Action("SaveFile", "Enclosure", new { id = Model.EnclosureID })',
                        removeUrl: '@Url.Action("RemoveFile", "Enclosure", new { id = Model.EnclosureID })',
                        autoUpload: true
                    },
                    multiple: true,
                    localization: {
                        select: 'Выберите файлы',
                        remove: '',
                        cancel: ''
                    },
                    files: initFiles,
                    error: onError,
                    remove: onRemove
                });

            });

            $("#submitBtn").kendoButton();
            $("#cancelBtn").kendoButton().click(function () {
                var url = $(this).data('url');
                window.location.href = url;
            });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}